import path from 'path'
import process from 'process'
import 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'

import { NetlifyPluginOptions } from '@netlify/build'
import { stripIndent } from 'common-tags'
import { existsSync } from 'fs-extra'
import fetch from 'node-fetch'

import { normalizedCacheDir, restoreCache, saveCache } from './helpers/cache'
import { NetlifyConfig, NetlifyPluginConstants } from '@netlify/build'
import {
    createMetadataFileAndCopyDatastore,
    checkConfig,
    getNeededFunctions,
    modifyConfig,
    shouldSkipBundlingDatastore,
} from './helpers/config'
import { modifyFiles } from './helpers/files'
import { deleteFunctions, writeFunctions } from './helpers/functions'
import { checkZipSize } from './helpers/verification'

const DEFAULT_FUNCTIONS_SRC = 'netlify/functions'
const netlifyConfig: NetlifyConfig = {
    redirects: [],
    headers: [],
    edge_handlers: [],
    functions: {
        '*': {},
    },
    build: undefined,
    plugins: [],
}

export async function onPostBuild(): Promise<void> {
    const PUBLISH_DIR = './public'
    const FUNCTIONS_SRC = DEFAULT_FUNCTIONS_SRC
    const cacheDir = normalizedCacheDir(PUBLISH_DIR)

    console.log('onBuild')

    if (existsSync(path.join(FUNCTIONS_SRC, 'gatsby'))) {
        console.log(stripIndent`
    Detected the function "${path.join(
        FUNCTIONS_SRC,
        'gatsby'
    )}" that seem to have been generated by an old version of the Essential Gatsby plugin. 
The plugin no longer uses this and it should be deleted to avoid conflicts.\n`)
    }

    const neededFunctions = await getNeededFunctions(cacheDir)

    // await deleteFunctions(constants)

    if (shouldSkipBundlingDatastore()) {
        console.log('Creating site data metadata file')
        await createMetadataFileAndCopyDatastore(PUBLISH_DIR, cacheDir)
    }

    // @ts-ignore
    await writeFunctions({ netlifyConfig, neededFunctions })

    // await modifyConfig({ netlifyConfig, cacheDir, neededFunctions })

    await modifyFiles({ netlifyConfig, neededFunctions })

    console.log('onPostBuild')

    for (const func of neededFunctions) {
        // await checkZipSize(path.join(FUNCTIONS_DIST, `__${func.toLowerCase()}.zip`))
    }
}

/*export async function onSuccess() {
  // Pre-warm the lambdas as downloading the datastore file can take a while
  if (shouldSkipBundlingDatastore()) {
    const FETCH_TIMEOUT = 5000
    const controller = new AbortController()
    const timeout = setTimeout(() => {
      controller.abort()
    }, FETCH_TIMEOUT)

    for (const func of ['api', 'dsg', 'ssr']) {
      const url = `${process.env.DEPLOY_PRIME_URL}/.netlify/functions/__${func}`
      console.log(`Sending pre-warm request to: ${url}`)

      try {
        await fetch(url, { signal: controller.signal })
      } catch (error) {
        console.log('Pre-warm request was aborted', error)
      } finally {
        clearTimeout(timeout)
      }
    }
  }
}*/
